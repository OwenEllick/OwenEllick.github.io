{
  "hash": "6b2616e48654d4de9db61c578db3b7e1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Homework 1\"\neditor: visual\n---\n\n\n# Part 1. Personal Website on GitHub\n\n1.  Decorate your website: ✅\n\n-   Replace YOUR NAME with your name in quarto.yml and index.qmd. ✅\n-   Describe yourself in index.qmd. ✅\n-   Add the picture file (e.g., png) of your profile photo to img directory. Then correct img/profile.png in index.qmd accordingly. ✅\n-   Add the PDF file of your resumé to the website working directory in your laptop. ✅\n-   Correct links for your resumé, LinkedIn, email, and optionally social media. ✅\n-   Make sure that you do not have any broken links in your website. ✅\n\n2.  Add a “ggplot Basics” blog post to your blog using Quarto document. ✅\n\n-   In your “ggplot Basics” blog post, briefly explain ggplot basics we discussed in Lecture 3, Lecture 4, and Classwork 4. ✅\n-   Choose a proper image file for a thumbnail for a blog post. ✅\n-   An YAML header template for a blog post can be found below, including an image option:\n\n3.  Use the 3-step git commands (git add ., git commit -m \"...\", and git push) to update your online website. ✅\n\n# Part 2. ggplot visualization\n\n-   Provide ggplot codes to replicate the given figures.\n\n-   Use the following data.frame for Question 1, 2, and 3.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nncdc_temp <- read_csv(\n  'https://bcdanl.github.io/data/ncdc_temp_cleaned.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 1464 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): station_id, month, flag, location\ndbl  (2): day, temperature\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nncdc_temp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,464 × 7\n   station_id  month   day temperature flag  date       location    \n   <chr>       <chr> <dbl>       <dbl> <chr> <date>     <chr>       \n 1 USC00042319 01        1        51   S     0000-01-01 Death Valley\n 2 USC00042319 01        2        51.2 S     0000-01-02 Death Valley\n 3 USC00042319 01        3        51.3 S     0000-01-03 Death Valley\n 4 USC00042319 01        4        51.4 S     0000-01-04 Death Valley\n 5 USC00042319 01        5        51.6 S     0000-01-05 Death Valley\n 6 USC00042319 01        6        51.7 S     0000-01-06 Death Valley\n 7 USC00042319 01        7        51.9 S     0000-01-07 Death Valley\n 8 USC00042319 01        8        52   S     0000-01-08 Death Valley\n 9 USC00042319 01        9        52.2 S     0000-01-09 Death Valley\n10 USC00042319 01       10        52.3 S     0000-01-10 Death Valley\n# ℹ 1,454 more rows\n```\n\n\n:::\n:::\n\n\n## Question 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(dplyr)\n\nncdc_temp <- read_csv(\"https://bcdanl.github.io/data/ncdc_temp_cleaned.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 1464 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): station_id, month, flag, location\ndbl  (2): day, temperature\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nncdc_temp$month <- factor(ncdc_temp$month, levels = sprintf(\"%02d\", 1:12), \n                          labels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n                                     \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"))\n\nmonthly_avg_temp <- ncdc_temp %>%\n  group_by(month, location) %>%\n  summarise(avg_temp = mean(temperature, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'month'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nfiltered_points <- monthly_avg_temp %>% filter(month %in% c(\"Jan\", \"Apr\", \"Jul\", \"Oct\"))\n\nggplot(monthly_avg_temp, aes(x = month, y = avg_temp, color = location, group = location)) +\n  geom_line(size = 1) + \n  geom_point(data = filtered_points, aes(x = month, y = avg_temp), size = 2, color = \"black\") + \n  scale_x_discrete(breaks = c(\"Jan\", \"Apr\", \"Jul\", \"Oct\"), labels = c(\"Jan\", \"Apr\", \"Jul\", \"Oct\")) + \n  labs(x = \"Month\", y = \"Temperature (°F)\", title = \"Monthly Average Temperature by Location\") +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](danl-310-hw1-Ellick-Owen_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n## Question 2\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nncdc_temp <- read_csv(\n 'https://bcdanl.github.io/data/ncdc_temp_cleaned.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 1464 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): station_id, month, flag, location\ndbl  (2): day, temperature\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Convert month to factor for proper ordering\nncdc_temp$month <- factor(ncdc_temp$month, levels = sprintf(\"%02d\", 1:12))\n\n# Now use ncdc_temp directly for the plot (no need to pre-calculate means)\nggplot(ncdc_temp, aes(x = month, y = temperature)) +  # Use 'temperature' directly\n  geom_boxplot(fill = \"lightgray\", color = \"black\") +  # REMOVE outlier.shape = NA\n  scale_y_continuous(breaks = seq(40, 100, 20), limits = c(20, 100)) +\n  labs(\n    title = \"\",\n    x = \"month\",\n    y = \"mean temperature (°F)\"  # Keep the y-axis label as \"mean temperature (°F)\"\n  ) +\n  theme_bw() +\n  theme(\n    panel.grid.major.y = element_line(color = \"lightgray\", linetype = \"dotted\"),\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.x = element_line(color = \"black\"),\n    axis.ticks.length.x = unit(0.2, \"cm\"),\n    text = element_text(size = 11)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 47 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](danl-310-hw1-Ellick-Owen_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n## Question 3\n\n\n",
    "supporting": [
      "danl-310-hw1-Ellick-Owen_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}