---
title: "data transformation basics"
editor: visual
---

# Data Transformation Basics

```{r}
library(tidyverse)
install.packages("nycflights13")
library(nycflights13)
library(skimr)
flights <- flights
View(flights) 
?flights
skim(flights)
```


```{r}
flights |> filter(month == 1, day == 1)
```

```{r}
class(flights$month == 1)

```



```{r}
df <- tibble(y = c(1, NA, 3))
df
```


```{r}

df |> 
  filter(y > 1)

```

```{r}
df |> 
  filter(is.na(y) | y > 1)
```



- Departed in summer (July, August, and September)
```{r}
flights |> 
  filter(month == 7 | month == 8 | month == 9 )
```


```{r}
flights |> 
  filter(month == 7 & month == 8 & month == 9 )
```


## arrange
```{r}
flights |> 
  arrange(-dep_delay)
```


```{r}

flights |> 
  arrange( desc(dep_delay) )
```


```{r}
flights |> 
  arrange(carrier)
```


```{r}
df
```


```{r}
df |> 
  arrange(y)
```


```{r}
df |> 
  arrange(-y)
```






```{r}
df |> 
  arrange(-is.na(y), -y)
```



```{r}
flights |> 
  select(starts_with("sched_"))
```



```{r}
flights |> 
  select(ends_with("time"))
```

```{r}
flights |> 
  rename(tail_num = tailnum)
```


```{r}
flights |> 
  relocate(time_hour, air_time)
```


```{r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60
  )
```





```{r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .before = day
  )
```




```{r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .after = day
  )
```



```{r}
x <- 1:10

ex <- data.frame(
  x = x
)

ex
```


```{r}
ex |> 
  mutate(
    x_lag = lag(x),
    x_lead = lead(x),
    x_cumsum = cumsum(x),
    x_cummean = cummean(x),
    x_log = log(x),
    x_log10 = log10(x)
  )
```



```{r}
df_gdp <- data.frame(
  year = 2017:2024,
  gdp = c(100, 108, 118, 120, 
          100, 105, 109, 115)
)

df_gdp
```


$$
\text{GDP Growth Rate}_{t+1} = \frac{\text{GDP}_{t+1} - \text{GDP}_{t}}{\text{GDP}_{t}}

# gdp_t+1 = 108
# gdp_t = 100
$$



```{r}
df_gdp |> 
  mutate(gdp_lag = lag(gdp),
         nume = gdp - gdp_lag,
         r = nume / gdp_lag)
```


```{r}
rank_me <- tibble( x = c(10, 5, 1, 5, 5, NA) )
rank_me <- rank_me |> 
  mutate(id_x = row_number(x),
         x_min_rank = min_rank(x),
         x_dense_rank = dense_rank(x)
         )
```



```{r}
flight_season <- flights |>  mutate(
    summer_month = if_else(month %in% c(6, 7, 8), TRUE, FALSE)) |> 
  select(month, summer_month)
flight_season
```


```{r}

flight_season <- flights |>  mutate(
    summer_month = if_else(month %in% c(6, 7, 8), TRUE, FALSE)) |> 
  select(month, summer_month)

```

```{r}

flight_season <- flights |>  mutate(
    summer_month = ifelse(month %in% c(6, 7, 8), TRUE, "FALSE")) |> 
  select(month, summer_month)

```


```{r}

flight_season <- flights |>  mutate(  ## ifelse() is less restrictive
    summer_month = ifelse(month %in% c(6, 7, 8), TRUE, 0))|> 
  select(month, summer_month)
```


```{r}
rank_me <- tibble( x = c(10, 5, 1, 5, 5, NA) )
rank_me <- rank_me |> 
  mutate(id_x = row_number(x),
         x_min_rank = min_rank(x),
         x_dense_rank = dense_rank(x)
         )
```

### Find the 10 most delayed flights using a ranking function. How do you want to handle ties?
```{r}
flights %>% 
  arrange(dep_delay) %>% 
  head(10)
```
```{r}
flights %>% 
 mutate(ranking_min = min_rank(-dep_delay)) %>% 
  filter(ranking_min == 10) %>% 
  arrange(ranking_min) %>% 
  relocate(ranking_min, dep_delay)
```
```{r}
flights %>% 
  mutate(ranking_dense )
```

## Summarize
- summarize() collapses a data frame to a single row.
- na.rm argument removes the missing values prior to computation when using summarize() or other aggregate functions.
- summarize() is not terribly useful unless we pair it with group_by().
```{r}
flights |> 
  summarize(delay = mean(dep_delay, na.rm = TRUE))

by_day <- flights |> group_by(year, month, day)
by_day |> summarize(delay = mean(dep_delay, na.rm = TRUE))
```

- Explore the relationship between the mean level distance and the mean level arr_delay for each value of dest.

```{r}
by_dest <- flights |> group_by(dest)
delay <- by_dest |> summarize(
  count = n(),
  dist = mean(distance, na.rm = TRUE),
  delay = mean(arr_delay, na.rm = TRUE)
)
delay <- delay |> 
  filter(count > 20, dest != "HNL")
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
  geom_point(aes(size = count), alpha = 1/3) +
  geom_smooth(se = FALSE)
```


#group with group_by()
```{r}
flights %>% 
  group_by(carrier) %>% 
  summarise(mean_dep_delay = mean(dep_delay, na.rm = TRUE))
```

- what happens if we don't set na.rm
```{r}
flights |> 
  group_by(year, month, day) |> 
  summarize(mean = mean(dep_delay))
  flights |> 
  group_by(year, month, day) |> 
  summarize(mean = mean(dep_delay, na.rm = TRUE))
```

-suppose missing values represent cancelled flights

```{r}
not_cancelled <- flights |> 
  filter(!is.na(dep_delay), !is.na(arr_delay))

not_cancelled |> 
  group_by(year, month, day) |> 
  summarize(mean = mean(dep_delay))
```
- lets look at the planes by their tail number that have highest average delays

```{r}
delays <- not_cancelled |> 
  group_by(tailnum) |> 
  summarize(
    delay = mean(arr_delay)
  )

ggplot(data = delays, mapping = aes(x = delay)) + 
  geom_freqpoly(binwidth = 10)
```
```{r}
delays <- not_cancelled |> 
  group_by(tailnum) |> 
  summarize( delay = mean(arr_delay, na.rm = TRUE),
             n = n() )

ggplot(data = delays, mapping = aes(x = n, y = delay)) + 
  geom_point(alpha = 1/10)

delays |> 
  filter(n > 25) |> 
  ggplot(mapping = aes(x = n, y = delay)) + 
    geom_point(alpha = 1/10)
```


- Measures of location: mean(x) and median(x).

- Measures of spread: sd(x), IQR(x).

```{r}
not_cancelled |> 
  group_by(year, month, day) |> 
  summarize( avg_delay1 = mean(arr_delay),
             avg_delay2 = mean(arr_delay[arr_delay > 0]) ) ## the average positive delay
## Brackets[] lets us filter (or subset) data from a column
## Why is distance to some destinations more variable than to others?
not_cancelled |> 
  group_by(dest) |> 
  summarize(distance_sd = sd(distance)) |> 
  arrange(desc(distance_sd))
```

-  Measures of rank: min(x), quantile(x, 0.25), max(x), range(x).

- Measures of position: first(x), nth(x, 2), last(x).

- When do the first and last flights leave each day?

```{r}
not_cancelled |> 
  group_by(year, month, day) |> 
  summarize(first = min(dep_time), 
            last = max(dep_time) )
```
```{r}
not_cancelled |> 
  group_by(year, month, day) |> 
  summarize(first_dep = first(dep_time),last_dep = last(dep_time) )
```

```{r}
not_cancelled |> 
  group_by(year, month, day) |> 
  mutate(r = min_rank(desc(dep_time))) |> 
  filter(r %in% range(r) )
```

```{r}
## Which destinations have the most carriers?
not_cancelled |> 
  group_by(dest) |> 
  summarise(carriers = n_distinct(carrier)) |> 
  arrange(desc(carriers))
  
  
not_cancelled |> 
  count(dest)

not_cancelled |> 
  count(tailnum, wt = distance)
```

```{r}
ggplot(data = diamonds) +
  geom_histogram(mapping = aes(x = carat), binwidth = 0.5)

diamonds |> 
  count(cut_width(carat, 0.5))
```

```{r}
## How many flights left before 5am? 
## (these usually indicate delayed flights from the previous day)
not_cancelled |> 
  group_by(year, month, day) |> 
  summarize(n_early = sum(dep_time < 500))

## What proportion of flights are delayed by more than an hour?
not_cancelled |> 
  group_by(year, month, day) |> 
  summarize(hour_prop = mean(arr_delay > 60))
```

```{r}
daily <- flights |> group_by(year, month, day)

(per_day   <- daily |> summarize(flights = n()))

(per_month <- per_day |> summarize(flights = sum(flights)))

(per_year  <- per_month |> summarize(flights = sum(flights)))
```