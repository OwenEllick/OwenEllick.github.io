---
title: "Map Visualization"
editor: visual
---

# Draw Maps
```{r}
election <- socviz::election
```

```{r}
library(tidyverse)
library(ggthemes)
socviz::election |> select(state, total_vote,
                    r_points, pct_trump, party, census) |>
    sample_n(5)
```
```{r}
party_colors <- c("#2E74C0", "#CB454A")  # Hex color codes for Dem Blue and Rep Red
p0 <- ggplot(data = filter(socviz::election, st != "DC"),
             mapping = aes(x = r_points,
                           y = reorder(state, r_points),
                           color = party))
```

```{r}
p1 <- p0 + geom_vline(xintercept = 0, color = "gray30") +
    geom_point(size = 2)

p1
```

```{r}
p2 <- p1 + scale_color_manual(values = party_colors)

p2
```
```{r}
p3 <- p2 + scale_x_continuous(breaks = c(-30, -20, -10, 0, 10, 20, 30, 40),
                              labels = c("30\n (Clinton)", "20", "10", "0",
                                         "10", "20", "30", "40\n(Trump)"))
p3
```
```{r}
p3 + facet_wrap(~ census, ncol=1, scales="free_y") +
     guides(color = "none") + labs(x = "Point Margin", y = "") +
     theme(axis.text=element_text(size=8))
```

```{r}
us_states <- map_data("state") # from the 'maps' package
us_states
view(us_states)
```

## geom_polygon()

```{r}
p <- ggplot(data = us_states,
            mapping = aes(x = long, y = lat,
                          group = group))

p + geom_polygon(fill = "white", color = "black")
```
```{r}
p <- ggplot(data = us_states,
            aes(x = long, y = lat,
                group = group, fill = region))

p + geom_polygon(color = "gray90", size = 0.1) + guides(fill = FALSE)
```

- We can transform the default projection used by geom_polygon(), via the coord_map() function.

- The Albers projection requires two latitude parameters, lat0 and lat1.
- see below:

```{r}
p <- ggplot(data = us_states,
            mapping = aes(x = long, y = lat,
                          group = group, fill = region))

p + geom_polygon(color = "gray90", size = 0.1) +
    coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
    guides(fill = FALSE)
```

# Adding election data on to the map

```{r}
election$region <- tolower(election$state)
us_states_elec <- left_join(us_states, election)
```

```{r}
p0 <- ggplot(data = us_states_elec,
            aes(x = long, y = lat,
                group = group, fill = party))

p0 + geom_polygon(color = "gray90", size = 0.1) +
    coord_map(projection = "albers", lat0 = 39, lat1 = 45) 
```
```{r}
p1 <- p0 + geom_polygon(color = "gray90", size = 0.1) +
    coord_map(projection = "albers", lat0 = 39, lat1 = 45) 

p2 <- p1 + scale_fill_manual(values = party_colors) +
    labs(title = "Election Results 2016", fill = NULL)

p2 + theme_map()

```
ap U.S. state-level data
To the fill aethetic, let’s try a continuous measure, such as the percentage of the vote received by Donald Trump (pct_trump).

## Scale gradient 2

- For election results, we might prefer a gradient that diverges from a midpoint.
- The scale_*_gradient2() function gives us a blue-red spectrum that passes through white by default.
- We can also re-specify the mid-level color along with the high and low colors
```{r}
p0 <- ggplot(data = us_states_elec,
             mapping = aes(x = long, y = lat, group = group, fill = d_points))

p1 <- p0 + geom_polygon(color = "gray90", size = 0.1) +
    coord_map(projection = "albers", lat0 = 39, lat1 = 45) 

p2 <- p1 + scale_fill_gradient2() + labs(title = "Winning margins") 
p2 + theme_map() + labs(fill = "Percent")
```

## Scale gradient mid color
```{r}
p3 <- p1 + scale_fill_gradient2(low = "red", 
                                mid = scales::muted("purple"),
                                high = "blue", 
                                breaks = c(-25, 0, 25, 50, 75)) 
p3 + theme_map() + labs(fill = "Percent", title = "Winning margins")
```
- From the scale_*_gradient2() function, we can also re-specify the mid-level color along with the high and low colors.


```{r}
p0 <- ggplot(data = filter(us_states_elec,
                           region != "district of columbia"),
             aes(x = long, y = lat, group = group, fill = d_points))

p3 <- p1 + scale_fill_gradient2(low = "red", 
                                mid = scales::muted("purple"),
                                high = "blue", 
                                breaks = c(-25, 0, 25, 50, 75)) 
p3 + theme_map() + labs(fill = "Percent", title = "Winning margins", caption = "DC is omitted.")
```

## Cloropleth maps
- Choropleth maps display divided geographical areas or regions that are colored, shaded or patterned in relation to a data variable.

- County-level US choropleth maps can be aesthetically pleasing, because of the added detail they bring to a national map.

- The county-level datasets (county_map and county_data) are included in the socviz library.

- The county map data frame, county_map, has been processed a little in order to transform it to an Albers projection, and also to relocate (and re-scale) Alaska and Hawaii.

```{r}

county_map <- socviz::county_map
county_data <- socviz::county_data
county_data |>
  select(id, name, state, pop_dens, pct_black) |>
  sample_n(5)

county_full <- 
  left_join(county_map, county_data, by = "id")
```

```{r}
p <- ggplot(data = county_full,
            mapping = aes(x = long, y = lat,
                          fill = pop_dens, 
                          group = group))
p1 <- p + geom_polygon(color = "gray90", size = 0.05)
p1
```
- p1 object produces a legible map, but by default it chooses an unordered categorical layout.
- This is because the pop_dens variable is not ordered.
- pop_dens is an un-ordered discrete variable.

```{r}
p1 + coord_equal()
```

- The use of coord_equal() makes sure that the relative scale of our map does not change even if we alter the overall dimensions of the plot.


```{r}
p2 <- p1 + scale_fill_brewer(
  palette = "Blues",
  labels = c("0-10", "10-50", "50-100", "100-500",
             "500-1,000", "1,000-5,000", ">5,000"))
p2
```

- We can manually supply the right sort of scale using the scale_fill_brewer() function, together with a nicer set of labels.

```{r}
p2 + labs(fill = "Population per\nsquare mile") +
  theme_map() +
  guides(fill = guide_legend(nrow = 1)) + 
  theme(legend.position = "bottom")
```
- We can also use the guides() function to make sure each element of the key in the legend appears on the same row.

```{r}
p <- ggplot(data = county_full,
            mapping = aes(x = long, y = lat, fill = pct_black, 
                          group = group))
p1 <- p + geom_polygon(color = "gray90", size = 0.05) + coord_equal()
p2 <- p1 + scale_fill_brewer(palette="Greens")

p2 + labs(fill = "US Population, Percent Black") +
  guides(fill = guide_legend(nrow = 1)) + 
  theme_map() + theme(legend.position = "bottom")
```
- We can now do exactly the same thing for our map of percent African-American population by county.
- pct_black is an un-ordered factor variable.
- table(county_full$pct_black)


```{r}
orange_pal <- RColorBrewer::brewer.pal(n = 6, name = "Oranges")
orange_pal
orange_rev <- rev(orange_pal)
orange_rev
```
- We use the RColorBrewer::brewer.pal() function to manually create two palettes.
- The brewer.pal() function produces evenly-spaced color schemes.
- We use the rev() function to reverse the order of a color vector.

```{r}
pop_p <- ggplot(data = county_full,
            mapping = aes(x = long, y = lat,
                          fill = pop_dens6, 
                          group = group))

pop_p1 <- pop_p + geom_polygon(color = "gray90", size = 0.05) +
  coord_equal()
pop_p2 <- pop_p1 + scale_fill_manual(values = orange_pal)

pop_p2 + labs(title = "Population Density",
              fill = "People per square mile") +
    theme_map() + theme(legend.position = "bottom")
```
```{r}
pop_p2_rev <- pop_p1 + scale_fill_manual(values = orange_rev)

pop_p2_rev + labs(title = "Reverse-coded Population Density",
              fill = "People per square mile") +
    theme_map() + theme(legend.position = "bottom")
```

```{r}
gop_p <- ggplot(data = county_full,
                mapping = aes(x = long, y = lat,
                              fill = per_gop_2016, 
                              group = group))

gop_p1 <- gop_p + geom_polygon(color = "gray70", size = 0.05) + coord_equal()
gop_p1
```
- Let’s consider a county map of a continuous variable, such as per_gop_2016.
- Check class(county_full$per_gop_2016)


```{r}
library(ggthemes)
library(tidyverse)
gop_p2 <- gop_p1 + scale_fill_gradient2( 
  low = '#2E74C0',  # from party_colors for DEM
  mid = '#FFFFFF',  # transparent white
  high = '#CB454A',  # from party_colors for GOP
  na.value = "grey50",
  midpoint = .5)

gop_p2 + labs(title = "US Presidential Election 2016",
              fill = "Trump vote share") +
  theme_map() + theme(legend.position = "bottom")
```

## Small Multiple Maps

- Sometimes we have geographical data with repeated observations over time.

- A common case is to have a country- or state-level measure observed over a period of years (Panel data).

- Let’s consider consider the poverty rate determined by level of educational attainment in NY.
```{r}
NY_socioecon_geo_poverty <- read_csv(
  'https://bcdanl.github.io/data/NY_socioecon_geo_poverty.csv'
)
```

```{r}
library(viridis)
```
```{r}
p <- ggplot(data = NY_socioecon_geo_poverty,
            mapping = aes(x = long, y = lat, group = group, 
                          fill = c04_058 ))
  
p1 <- p + geom_polygon(color = "grey", size = 0.1) +
    coord_map(projection = "albers", lat0 = 39, lat1 = 45) 

p2 <- p1 + scale_fill_viridis_c(option = "plasma") + theme_map() 
p2
```

```{r}
p2 + facet_wrap(~ year, ncol = 3) +
    theme(legend.position = "bottom",
          strip.background = element_blank()) +
    labs(fill = "Poverty rate in NY (%)",
         title = "Poverty rate for the male population 25 years and over \nfor whom the highest educational attainment is bachelor's degree")
```

## Hexbin Maps

- As an alternative to state-level choropleths, we can consider statebins.

```{r}
library(statebins)
p <- ggplot(election, aes( state = state, fill = pct_trump ) )
p1 <- p +  geom_statebins(lbl_size = 5,
                          border_col = "grey90", border_size = 1)
p2 <- p1 + labs(fill = "Percent Trump") +
  coord_equal() +
  theme_statebins( legend_position = c(.45, 1) ) +
  theme( legend.direction="horizontal" )
p2
```

```{r}
library(ggthemes)
library(tidyverse)
p2 + scale_fill_gradient2( 
  low = '#2E74C0',  # from party_colors for DEM
  mid = '#FFFFFF',  # transparent white
  high = '#CB454A',  # from party_colors for GOP
  na.value = "grey50",
  midpoint = 50)   # set the midpoint value
```

