---
title: "Notes"
editor: visual
---

```{r}
library(tidyverse)
data = mpg
```

```{r}
#adding color to the plot
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy, 
                   color = class) ) 

```

```{r}
#adding shape to the plot
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy, 
                   shape = class) )
```

```{r}
#adding size to the. plot
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy, 
                   size = class) )
```

```{r}
#adding alpha (transparency) to the plot
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy, 
                   alpha = class) )
```


#Specifying aes property manually


```{r}
ggplot(mpg, 
       aes(x = displ, y =hwy)) +
  geom_point(alpha = 0.3)
```


#Facets


```{r}
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy), 
             alpha = .5) + 
  facet_wrap( . ~ class, nrow = 2)
```

```{r}
ggplot(data = mpg,
       mapping = aes (x =displ, y = hwy,
                      color = class)) +
  geom_point() +
  geom_smooth()
```

```{r}
#to facet the plot on. combo of two varibale add facet_grid (var_row ~ Var_ col)

ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy),
             alpha = .5) + 
  facet_grid(drv ~ cyl)
```

```{r}
#option scales in facet is whether scales is: fixed (default), free in one dimenstion ( free_x, free_y), or free in two dimensions (free)
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy),
             alpha = .5) + 
  facet_grid(drv ~ cyl, 
             scales = "free_x")
```

```{r}
#A geom_*() is the geometrical object that a plot uses to represent data.
#Bar charts use geom_bar();
#Line charts use geom_line();
#Boxplots use the geom_boxplot();
#Scatterplots use the geom_point();
#Fitted lines use the geom_smooth();
#and many more!
#We can use different geom_*() to plot the same data.
```


#Geom Plots


```{r}
#Scatterplot
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy),
             alpha = .3)
```

```{r}
#fitted lines
ggplot(data = mpg) + 
  geom_smooth(mapping = 
                aes(x = displ, 
                    y = hwy))
```

```{r}
#Every geom function in ggplot2 takes a mapping argument.

#However, not every aesthetic works with every geom.

#We could set the shape of a point, but you couldnâ€™t set the shape of a line;
#We could set the linetype of a line.

ggplot( data = mpg ) + 
  geom_smooth( mapping = 
                 aes( x = displ, 
                      y = hwy, 
                      linetype = drv) )
```

```{r}
#Setting method = lm manually in geom_smooth() gives a straight line that fits into data points.

ggplot( data = mpg ) + 
  geom_smooth( mapping = 
                 aes( x = displ, 
                      y = hwy),
               method = lm)
```

```{r}
#We can set the group aesthetic to a categorical variable to draw multiple objects.
#ggplot2 will draw a separate object for each unique value of the grouping variable.

ggplot(data = mpg) +
  geom_smooth(mapping = 
                aes(x = displ, 
                    y = hwy, 
                    group = drv))
```

```{r}
#To display multiple geometric objects in the same plot, add multiple geom_*() functions to ggplot():

#Using geom_point(), geom_smooth(), and geom_smooth(method = lm) together is an excellent option to visualize the relationship between the two variables.

ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy),
             alpha = .3) +
  geom_smooth(mapping = 
                aes(x = displ, 
                    y = hwy)) +
  geom_smooth(mapping = 
                aes(x = displ, 
                    y = hwy), 
              method = lm, 
              color = 'red')
```

```{r}
ggplot(diamonds) +
  geom_histogram(aes(x = price))
```

```{r}
ggplot(diamonds) +
  geom_histogram(aes(x = price), 
                 bins = 200)
```

```{r}
ggplot(diamonds) +
  geom_freqpoly(aes(x = price), 
                 bins = 200)
```


#The use of. log()


```{r}
library(tidyverse)
sale_df <- read_csv(
  "https://bcdanl.github.io/data/home_sales_nyc.csv")
```

```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut))

```

```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = 
             aes(x = cut, 
                 y = stat(prop), 
                 group = 1))
```

```{r}
ggplot(data = diamonds) + 
  stat_summary(
    mapping = aes(x = cut, y = depth),
    fun.min = min,
    fun.max = max,
    fun = median
  )
```


#Position Adjustment


```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = 
             aes(x = cut, 
                 color = cut))
```

```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = 
             aes(x = cut, 
                 fill = cut))
```

```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = 
             aes(x = cut, 
                 fill = clarity),
           position = "stack")
```

```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = 
             aes(x = cut, 
                 fill = clarity), 
           position = "fill")
```

```{r}
ggplot(data = diamonds) + 
  geom_bar(mapping = 
             aes(x = cut, 
                 fill = clarity), 
           position = "dodge")
```

```{r}
ggplot(data = mpg, 
       mapping = 
         aes(x = cty, 
             y = hwy)) + 
  geom_point() + 
  geom_abline() # math: y = ax + b
```

```{r}
ggplot(data = mpg, 
       mapping = 
         aes(x = cty, 
             y = hwy)) + 
  geom_point() + 
  geom_abline() +
  coord_fixed()
```

```{r}
#ggplot(data = <DATA>) + 
  #<GEOM_FUNCTION>(
     #mapping = aes(<MAPPINGS>),
    # stat = <STAT>, 
     #position = <POSITION>) +
  #<COORDINATE_FUNCTION> +
  #<FACET_FUNCTION> +
  #<SCALE_FUNCTIONS> +
  #<GUIDES> +
  #<THEME>
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy),
             alpha = .3) +
  geom_smooth(mapping = 
                aes(x = displ, 
                    y = hwy))
```

```{r}
ggplot(data=mpg, mapping=aes(x=displ, y=hwy)) + 
  geom_point(shape=19, alpha=0.4) +
  geom_smooth(se=FALSE)


```

```{r}
ggplot(mpg, aes(x=displ, y=hwy, group=drv)) +
  geom_point(alpha=0.4, shape=19) +
  geom_smooth(show.legend = FALSE, se=FALSE) 
```

```{r}
ggplot(mpg, aes(x=displ, y=hwy, color=drv)) +
  geom_point(alpha=0.4, shape=19) +
  geom_smooth(se=FALSE)
```

