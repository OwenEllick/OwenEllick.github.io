---
title: "Homework 1"
editor: visual
---

# Part 1. Personal Website on GitHub

1.  Decorate your website: ✅

-   Replace YOUR NAME with your name in quarto.yml and index.qmd. ✅
-   Describe yourself in index.qmd. ✅
-   Add the picture file (e.g., png) of your profile photo to img directory. Then correct img/profile.png in index.qmd accordingly. ✅
-   Add the PDF file of your resumé to the website working directory in your laptop. ✅
-   Correct links for your resumé, LinkedIn, email, and optionally social media. ✅
-   Make sure that you do not have any broken links in your website. ✅

2.  Add a “ggplot Basics” blog post to your blog using Quarto document. ✅

-   In your “ggplot Basics” blog post, briefly explain ggplot basics we discussed in Lecture 3, Lecture 4, and Classwork 4. ✅
-   Choose a proper image file for a thumbnail for a blog post. ✅
-   An YAML header template for a blog post can be found below, including an image option:

3.  Use the 3-step git commands (git add ., git commit -m "...", and git push) to update your online website. ✅

# Part 2. ggplot visualization

-   Provide ggplot codes to replicate the given figures.

-   Use the following data.frame for Question 1, 2, and 3.

```{r}
library(tidyverse)
ncdc_temp <- read_csv(
  'https://bcdanl.github.io/data/ncdc_temp_cleaned.csv')
ncdc_temp
```

## Question 1

```{r}
library(ggplot2)
library(readr)
library(dplyr)

ncdc_temp <- read_csv("https://bcdanl.github.io/data/ncdc_temp_cleaned.csv")

ncdc_temp$month <- factor(ncdc_temp$month, levels = sprintf("%02d", 1:12), 
                          labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", 
                                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))

monthly_avg_temp <- ncdc_temp %>%
  group_by(month, location) %>%
  summarise(avg_temp = mean(temperature, na.rm = TRUE))

filtered_points <- monthly_avg_temp %>% filter(month %in% c("Jan", "Apr", "Jul", "Oct"))

ggplot(monthly_avg_temp, aes(x = month, y = avg_temp, color = location, group = location)) +
  geom_line(size = 1) + 
  geom_point(data = filtered_points, aes(x = month, y = avg_temp), size = 2, color = "black") + 
  scale_x_discrete(breaks = c("Jan", "Apr", "Jul", "Oct"), labels = c("Jan", "Apr", "Jul", "Oct")) + 
  labs(x = "Month", y = "Temperature (°F)", title = "Monthly Average Temperature by Location") +
  theme_minimal()

```

## Question 2

```{r}
library(tidyverse)

ncdc_temp <- read_csv(
 'https://bcdanl.github.io/data/ncdc_temp_cleaned.csv')

# Convert month to factor for proper ordering
ncdc_temp$month <- factor(ncdc_temp$month, levels = sprintf("%02d", 1:12))

# Now use ncdc_temp directly for the plot (no need to pre-calculate means)
ggplot(ncdc_temp, aes(x = month, y = temperature)) +  # Use 'temperature' directly
  geom_boxplot(fill = "lightgray", color = "black") +  # REMOVE outlier.shape = NA
  scale_y_continuous(breaks = seq(40, 100, 20), limits = c(20, 100)) +
  labs(
    title = "",
    x = "month",
    y = "mean temperature (°F)"  # Keep the y-axis label as "mean temperature (°F)"
  ) +
  theme_bw() +
  theme(
    panel.grid.major.y = element_line(color = "lightgray", linetype = "dotted"),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.ticks.x = element_line(color = "black"),
    axis.ticks.length.x = unit(0.2, "cm"),
    text = element_text(size = 11)
  )
```

## Question 3

```{r}
library(tidyverse)
library(ggridges)

ncdc_temp <- read_csv(
 'https://bcdanl.github.io/data/ncdc_temp_cleaned.csv')

monthly_mean_temp <- ncdc_temp %>% 
  group_by(month) %>% 
  summarise(mean_temp = mean(temperature, na.rm = TRUE))

ggplot(ncdc_temp, aes(x = temperature, y = factor(month))) +
  geom_density_ridges(scale = 2, fill = 'lightblue', linetype = "blank") +
  labs(x = "mean temperature (°F)", y = "month") +
  theme_minimal()

```

## Question 4

```{r}
library(ggplot2)
data(mtcars)

ggplot(mtcars, aes(x = disp, y = mpg, color = hp)) +
  geom_point() +
  scale_color_gradient(low = "navy", high = "lightblue") +
  labs(x = "displacement(cu. in.)", y = "fuel efficiency(mpg)", color = "hp") +
  theme_minimal()
```

## Question 5

```{r}
library(tidyverse)

popgrowth_df <- read_csv(
  'https://bcdanl.github.io/data/popgrowth.csv')
popgrowth_df <- popgrowth_df %>% 
  mutate(popgrowth = (pop2010 - pop2000) / pop2000 * 100)

ggplot(popgrowth_df, aes(x = reorder(state,popgrowth), y = popgrowth, fill = region)) + 
  geom_col() +
  coord_flip() +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  labs( x = " reorder(state, popgrowth)", y = "population growth, 2000 to 2010", fill = "region") +
  theme_minimal()
```

## Question 6

```{r}
library(tidyverse)
male_Aus <- read_csv(
  'https://bcdanl.github.io/data/aus_athletics_male.csv')

ggplot(male_Aus, aes (x = height, y = pcBfat, shape = sport, color = sport)) +
  geom_point(size = 3, alpha = 0.7) +
  scale_shape_manual( values = c( "basketball" = 16, "field" = 15, "swimming" = 18, "track" = 17, "water polo" = 25)) +
  scale_color_manual(values = c("basketball" = "red", "field" = "grey", "swimming" = "grey", "track" = "grey", "water polo" = "grey")) +
  labs(x = "height(cm)", y = "% body fat", shape = "sport", color = "sport") +
  theme_minimal()
```

## Question 7

```{r}
library(tidyverse)

titanic <- read_csv('https://bcdanl.github.io/data/titanic_cleaned.csv')

# Create a new variable identical to gender
titanic_gender <- titanic %>%
  mutate(group = gender)

# Create a new data frame with "all passengers"
titanic_all <- titanic %>%
  mutate(group = "all passengers")

# Combine the two data frames
titanic_plot <- bind_rows(titanic_gender, titanic_all)

# Create the plot
ggplot(titanic_plot, aes(x = age, fill = group)) +  # Fill mapped to 'group'
  geom_density(
    aes(y = after_stat(count)),
    alpha = 0.5,
    color = "black",
    position = "identity"
  ) +
  facet_wrap(~ gender, ncol = 2) +  # Facet by 'gender'
  scale_fill_manual(
    values = c("lightgray", "darkorange", "steelblue"),
    labels = c("all passengers", "females", "males")
  ) +
  scale_y_continuous(
    breaks = seq(0, 25, by = 5),
    limits = c(0, 25),
    name = "Count"
  ) +
  labs(x = "Passenger Age (years)") +
  theme_minimal() +
  theme(legend.position = "bottom")

```

## Question 8

```{r}
library(tidyverse)
library(ggplot2)
library(readr)

# Load the data
cows_filtered <- read_csv("https://bcdanl.github.io/data/cows_filtered.csv")

# Create the density plot
ggplot(cows_filtered, aes(x = butterfat, fill = breed, color = breed)) +
  geom_density(alpha = 0.3) +
  labs(x = "butterfat contents", y = "density") +
  theme_minimal()


```

## Question 9

-   Provide your GitHub username.
    -   OwenEllick
